;TP2 interprete de lisp

(defun buscarExpresionAmb (exp amb)
 (if (null amb) nil
	(if (eq (car amb) exp) 
		(cadr amb)
		(buscarExpresionAmb exp (cddr amb))
	)
 )
)

(defun armarLista (arg amb)
	(if (null (cdr arg)) (cons (evaluar (car arg) amb) ())
		(cons (evaluar (car arg) amb) (armarLista (cdr arg) amb))
	)
)

;Importe cuando hago quiero agrupar valores de dos listas y voy agarrando de la 
;cabeza utilizo list ya que trabajo con atomos y el const no funciona
;porque necesitaria que el segundo asea una lista
(defun construirAmbiente (variables valor amb)
	(if (null (cdr variables))
		(list (car variables) (evaluar (car valor) amb))
		(append (list (car variables) (evaluar (car valor) amb)) 
			(construirAmbiente (cdr variables) (cdr valor) amb))
	)
)

(defun construirFuncion (exp)
	(nth 2 (car exp))
)

(defun evaluarLambda (exp amb)
		(evaluar (construirFuncion exp) (construirAmbiente (cadar exp) (cdr exp) amb))
)

(defun evaluar (exp amb)
(if (atom exp)  
	(if (numberp exp) exp
		(if (null exp) nil 
			(if (eq exp 't) t (buscarExpresionAmb exp amb))			
		)
	)
	(cond
		((listp (car exp))
			(if (eq (caar exp) 'lambda)
				(evaluarLambda exp amb)
			)
		)
		((eq (car exp) 'quote) (cadr exp))
		((eq (car exp) 'if) (if (evaluar (cadr exp) amb)
								(evaluar (nth 2 exp) amb) 
								(evaluar (nth 3 exp) amb)
							)
		)
		((eq (car exp) 'or) 
			(or (evaluar (nth 1 exp) amb) (evaluar (nth 2 exp) amb))
		)
		((eq (car exp) 'and) 
			(and (evaluar (nth 1 exp) amb) (evaluar (nth 2 exp) amb))
		)
		((eq (car exp) 'list)
			(armarLista (cdr exp) amb)
			)
		((eq (car exp) 'car)
			(car (evaluar (nth 1 exp) amb))
			)
		((eq (car exp) 'cdr)
			(cdr (evaluar (nth 1 exp) amb))
		)
		((eq (car exp) '+)
			(+ (evaluar (nth 1 exp) amb)  (evaluar (nth 2 exp) amb) )
		)
		((eq (car exp) '-)
			(- (evaluar (nth 1 exp) amb) (evaluar (nth 2 exp) amb) )
		)
		((eq (car exp) '*)
			(* (evaluar (nth 1 exp) amb)  (evaluar (nth 2 exp) amb) )
		)
		(t exp)
	)	
)
)

